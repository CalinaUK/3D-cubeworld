// 03_Camera
// Version up to lab 3.0.

#include <iostream>
#include <fstream>
#include <string>
#include <sstream>
#include <vector>
using namespace std;

#define GLM_ENABLE_EXPERIMENTAL

#include <GL/glew.h>
#include <GLFW/glfw3.h>
#include <glm/glm/glm.hpp>
#include <glm/glm/gtx/transform.hpp>

void errorCallbackGLFW(int error, const char* description);
void hintsGLFW();
void endProgram();
void render(double currentTime);
void update(double currentTime);
void setupRender();
void startup();
void onResizeCallback(GLFWwindow* window, int w, int h);
void onKeyCallback(GLFWwindow* window, int key, int scancode, int action, int mods);
void onMouseButtonCallback(GLFWwindow* window, int button, int action, int mods);
void onMouseMoveCallback(GLFWwindow* window, double x, double y);
void onMouseWheelCallback(GLFWwindow* window, double xoffset, double yoffset);
void debugGL();
static void APIENTRY openGLDebugCallback(GLenum source,
	GLenum type,
	GLuint id,
	GLenum severity,
	GLsizei length,
	const GLchar* message,
	const GLvoid* userParam);
string readShader(string name);
void  checkErrorShader(GLuint shader);
void readObj(string name);


// VARIABLES
GLFWwindow*		window;
int				windowWidth = 640;
int				windowHeight = 480;
bool			running = true;

GLuint          program;
GLuint          vao;
GLuint          buffer[2];
GLint           mv_location;
GLint           proj_location;
float           aspect;
glm::mat4		proj_matrix;
float			angleX = 0.0f;
float			angleY = 0.0f;
float			disp = 0.0;
float			fovy = 45.0f;
glm::vec3		cameraPosition = glm::vec3(0.0f, 0.0f, 5.0f);
glm::vec3		cameraFront = glm::vec3(0.0f, 0.0f, -1.0f);
glm::vec3		cameraUp = glm::vec3(0.0f, 1.0f, 0.0f);
bool			keyStatus[1024];
GLfloat			deltaTime = 0.0f;
GLfloat			lastTime = 0.0f;

// FPS camera variables
GLfloat			yaw = -90.0f;	// init pointing to inside
GLfloat			pitch = 0.0f;	// start centered
GLfloat			lastX = windowWidth / 2.0f;	// start middle screen
GLfloat			lastY = windowHeight / 2.0f;	// start middle screen
bool			firstMouse = true;

// OBJ Variables
std::vector < glm::vec3 > out_vertices;
std::vector < glm::vec2 > out_uvs;
std::vector < glm::vec3 > out_normals;

int main()
{
	if (!glfwInit()) {							// Checking for GLFW
		cout << "Could not initialise GLFW...";
		return 0;
	}

	glfwSetErrorCallback(errorCallbackGLFW);	// Setup a function to catch and display all GLFW errors.

	hintsGLFW();								// Setup glfw with various hints.		

												// Start a window using GLFW
	string title = "My OpenGL Application";
	const GLFWvidmode * mode = glfwGetVideoMode(glfwGetPrimaryMonitor());
	windowWidth = mode->width; windowHeight = mode->height;
	window = glfwCreateWindow(windowWidth, windowHeight, title.c_str(), glfwGetPrimaryMonitor(), NULL);
	//window = glfwCreateWindow(windowWidth, windowHeight, title.c_str(), NULL, NULL);
	if (!window) {								// Window or OpenGL context creation failed
		cout << "Could not initialise GLFW...";
		endProgram();
		return 0;
	}

	glfwMakeContextCurrent(window);				// making the OpenGL context current

												// Start GLEW (note: always initialise GLEW after creating your window context.)
	glewExperimental = GL_TRUE;					// hack: catching them all - forcing newest debug callback (glDebugMessageCallback)
	GLenum errGLEW = glewInit();
	if (GLEW_OK != errGLEW) {					// Problems starting GLEW?
		cout << "Could not initialise GLEW...";
		endProgram();
		return 0;
	}

	debugGL();									// Setup callback to catch openGL errors.	

												// Setup all the message loop callbacks.
	glfwSetWindowSizeCallback(window, onResizeCallback);		// Set callback for resize
	glfwSetKeyCallback(window, onKeyCallback);					// Set Callback for keys
	glfwSetMouseButtonCallback(window, onMouseButtonCallback);	// Set callback for mouse click
	glfwSetCursorPosCallback(window, onMouseMoveCallback);		// Set callback for mouse move
	glfwSetScrollCallback(window, onMouseWheelCallback);		// Set callback for mouse wheel.
																//glfwSetInputMode(window, GLFW_CURSOR, GLFW_CURSOR_NORMAL);	// Set mouse cursor.
	glfwSetInputMode(window, GLFW_CURSOR, GLFW_CURSOR_DISABLED);	// Set mouse cursor FPS.

	setupRender();								// setup some render variables.
	startup();									// Setup all necessary information for startup (aka. load texture, shaders, models, etc).

	do {										// run until the window is closed

		double currentTime = glfwGetTime();		// retrieve timelapse
		deltaTime = (float)currentTime - lastTime;		// Calculate delta time
		lastTime = (float)currentTime;					// Save for next frame calculations.
		glfwPollEvents();						// poll callbacks
		update(currentTime);					// update (physics, animation, structures, etc)
		render(currentTime);					// call render function.

		glfwSwapBuffers(window);				// swap buffers (avoid flickering and tearing)


		running &= (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_RELEASE);	// exit if escape key pressed
		running &= (glfwWindowShouldClose(window) != GL_TRUE);
	} while (running);

	endProgram();			// Close and clean everything up...


	cout << "\nPress any key to continue...\n";
	cin.ignore(); cin.get(); // delay closing console to read debugging errors.

	return 0;
}

void errorCallbackGLFW(int error, const char* description) {
	cout << "Error GLFW: " << description << "\n";
}

void hintsGLFW() {
	glfwWindowHint(GLFW_OPENGL_DEBUG_CONTEXT, GL_TRUE);			// Create context in debug mode - for debug message callback
	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 4);
	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
}

void endProgram() {
	glfwMakeContextCurrent(window);		// destroys window handler
	glfwTerminate();	// destroys all windows and releases resources.
}

void setupRender() {
	glfwSwapInterval(1);	// Ony render when synced (V SYNC)

	glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
	glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);
	glfwWindowHint(GLFW_SAMPLES, 0);
	glfwWindowHint(GLFW_STEREO, GL_FALSE);
}

void startup() {

	string vs_text = readShader("vs.glsl");
	const char* vs_source = vs_text.c_str();

	string fs_text = readShader("fs.glsl");
	static const char* fs_source2 = fs_text.c_str();

	GLuint vs = glCreateShader(GL_VERTEX_SHADER);
	glShaderSource(vs, 1, &vs_source, NULL);
	glCompileShader(vs);
	checkErrorShader(vs);

	program = glCreateProgram();
	GLuint fs = glCreateShader(GL_FRAGMENT_SHADER);
	glShaderSource(fs, 1, &fs_source2, NULL);
	glCompileShader(fs);
	checkErrorShader(fs);


	glAttachShader(program, vs);
	glAttachShader(program, fs);

	glLinkProgram(program);

	readObj("torus.obj");

	mv_location = glGetUniformLocation(program, "mv_matrix");
	proj_location = glGetUniformLocation(program, "proj_matrix");

	// Calculate proj_matrix for the first time.
	aspect = (float)windowWidth / (float)windowHeight;
	proj_matrix = glm::perspective(glm::radians(fovy), aspect, 0.1f, 1000.0f);

	//OPENGL 4.3 VERSION
	glGenVertexArrays(1, &vao);			// Create Vertex Array Object
	glBindVertexArray(vao);				// Bind VertexArrayObject

	glGenBuffers(2, buffer);			// Create new buffer
	glBindBuffer(GL_ARRAY_BUFFER, buffer[0]);	// Bind Buffer Vertex
	glBufferStorage(GL_ARRAY_BUFFER,
		out_vertices.size() * sizeof(glm::vec3),
		&out_vertices[0],
		GL_DYNAMIC_STORAGE_BIT);
	glBindBuffer(GL_ARRAY_BUFFER, buffer[1]);	// Bind Buffer color
	glBufferStorage(GL_ARRAY_BUFFER,
		out_normals.size() * sizeof(glm::vec3),
		&out_normals[0],
		GL_DYNAMIC_STORAGE_BIT);

	glVertexAttribFormat(0,			// Atrib index 
		3,							// Size
		GL_FLOAT,					// Type
		GL_FALSE,					// Normalised
		0);							// Offset					
	glBindVertexBuffer(				// Bind buffer to the vao and format. 
		0,							// Binding Index
		buffer[0],					// buffer
		0,							// offset
		sizeof(GLfloat) * 3);		// Stride
	glVertexAttribBinding(0, 0);	// Atrib Index, binding Index 
	glEnableVertexAttribArray(0);	// Enable Vertex Array Attribute

	glVertexAttribFormat(1,			// Atrib index 
		3,							// Size
		GL_FLOAT,					// Type
		GL_FALSE,					// Normalised
		0);							// Offset					
	glBindVertexBuffer(				// Bind buffer to the vao and format. 
		1,							// Binding Index
		buffer[1],					// buffer
		0,							// offset
		sizeof(GLfloat) * 3);		// Stride
	glVertexAttribBinding(1, 1);	// Atrib Index, binding Index 
	glEnableVertexAttribArray(1);	// Enable Color Array Attribute


	/*
									//OPENGL 4.5 VERSION
	glCreateBuffers(2, buffer);		// Create a new buffer

	// Store the vertices
	glNamedBufferStorage(buffer[0],		// Set data store
		out_vertices.size() * sizeof(glm::vec3),
		&out_vertices[0],
		GL_DYNAMIC_STORAGE_BIT);
	glBindBuffer(GL_ARRAY_BUFFER, buffer[0]);	// Bind Buffer

	// Store the colours
	glNamedBufferStorage(buffer[1],		// Set data store
		out_normals.size() * sizeof(glm::vec3),
		&out_normals[0],
		GL_DYNAMIC_STORAGE_BIT);
	glBindBuffer(GL_ARRAY_BUFFER, buffer[1]);	// Bind Buffer

	glCreateVertexArrays(1, &vao);		// Create Vertex Array Object
	// Bind vertex position buffer to the vao
	glVertexArrayVertexBuffer(vao,		// Vertex array object
		0,								// First vertex buffer binding
		buffer[0],						// Buffer object
		0,								// Start from the beginning
		sizeof(GLfloat) * 3				// size of vertex
	);

	// Specify the format for it
	glVertexArrayAttribFormat(vao,		// Vertex array object
		0,								// First attribute
		3,								// Number of components
		GL_FLOAT,						// Using floats
		GL_FALSE,						// Normalised
		0								// First element of the vertex
	);

	// Bind vertex colour buffer to the vao
	glVertexArrayVertexBuffer(vao,		// Vertex array object
		1,								// First vertex buffer binding
		buffer[1],						// Buffer object
		0,								// Start from the beginning
		sizeof(GLfloat) * 3				// size of vertex colour
	);

	// Specify the format for it
	glVertexArrayAttribFormat(vao,		// Vertex array object
		1,								// Second attribute
		3,								// Number of components
		GL_FLOAT,						// Using floats
		GL_FALSE,						// Normalised
		0								// First element of the vertex
	);

	glEnableVertexArrayAttrib(vao, 0);	// Enable Vertex Array Attribute
	glEnableVertexArrayAttrib(vao, 1);	// Enable Vertex Array Attribute


	glBindVertexArray(vao);				// Bind VertexArrayObject
	*/
								

	glEnable(GL_DEPTH_TEST);
	glDepthFunc(GL_LEQUAL);
}

void update(double currentTime) {

	// calculate movement
	GLfloat cameraSpeed = 1.0f * deltaTime;
	if (keyStatus[GLFW_KEY_W]) cameraPosition += cameraSpeed * cameraFront;
	if (keyStatus[GLFW_KEY_S]) cameraPosition -= cameraSpeed * cameraFront;
	if (keyStatus[GLFW_KEY_A]) cameraPosition -= glm::normalize(glm::cross(cameraFront, cameraUp)) * cameraSpeed;
	if (keyStatus[GLFW_KEY_D]) cameraPosition += glm::normalize(glm::cross(cameraFront, cameraUp)) * cameraSpeed;

}

void render(double currentTime) {
	glViewport(0, 0, windowWidth, windowHeight);

	// Clear colour buffer
	static const GLfloat silver[] = { 0.9f, 0.9f, 0.9f, 1.0f }; glClearBufferfv(GL_COLOR, 0, silver);

	// Clear Deep buffer
	static const GLfloat one = 1.0f; glClearBufferfv(GL_DEPTH, 0, &one);

	glUseProgram(program);
	glUniformMatrix4fv(proj_location, 1, GL_FALSE, &proj_matrix[0][0]);

	glm::vec3 modelPositions[] = {
		glm::vec3(0.0f,  0.0f,  0.0f),
		glm::vec3(-0.5f, -0.5f, -0.5f),
		glm::vec3(1.0f,  0.0f, -1.0f),
		glm::vec3(0.5f, -1.0f, -1.5f),
		glm::vec3(-1.0f,  1.0f, -0.5f),
		glm::vec3(1.0f,  0.5f, -0.0f),
		glm::vec3(0.0f,  1.0f,  0.5f),
		glm::vec3(0.5f, -0.5f,  1.0f),
		glm::vec3(-1.0f,  0.0f,  1.5f),
		glm::vec3(-0.5f, -0.5f,  1.0f),
		glm::vec3(-1.0f, -1.0f,  0.5f),
		glm::vec3(-1.0f, -0.5f,  0.0f),
	};

	glm::vec3 modelRotations[] = {
		glm::vec3(30.0f, 10.0f,  0.0f),
		glm::vec3(20.0f, 10.0f,  0.0f),
		glm::vec3(30.0f, 40.0f,  0.0f),
		glm::vec3(20.0f, 50.0f,  0.0f),
		glm::vec3(40.0f, 50.0f,  0.0f),
		glm::vec3(70.0f, 60.0f,  0.0f),
		glm::vec3(80.0f, 60.0f,  0.0f),
		glm::vec3(10.0f, 20.0f,  0.0f),
		glm::vec3(70.0f, 30.0f,  0.0f),
		glm::vec3(50.0f, 40.0f,  0.0f),
		glm::vec3(60.0f, 80.0f,  0.0f),
		glm::vec3(70.0f, 80.0f,  0.0f),
	};

	glm::mat4 viewMatrix = glm::lookAt(cameraPosition,					// eye
		cameraPosition + cameraFront,	// centre
		cameraUp);						// up


	for (int i = 0; i < 12; i++) {
		glm::mat4 modelMatrix = glm::translate(glm::mat4(1.0f), glm::vec3(0.0f, 0.0f, disp));
		modelMatrix = glm::translate(modelMatrix, modelPositions[i]);
		modelMatrix = glm::rotate(modelMatrix, angleX + modelRotations[i].x, glm::vec3(1.0f, 0.0f, 0.0f));
		modelMatrix = glm::rotate(modelMatrix, angleY + modelRotations[i].y, glm::vec3(0.0f, 1.0f, 0.0f));

		glm::mat4 mv_matrix = viewMatrix * modelMatrix;

		glUniformMatrix4fv(mv_location, 1, GL_FALSE, &mv_matrix[0][0]);
		glDrawArrays(GL_TRIANGLES, 0, out_vertices.size());
	}

}

void onResizeCallback(GLFWwindow* window, int w, int h) {
	windowWidth = w;
	windowHeight = h;

	aspect = (float)w / (float)h;
	proj_matrix = glm::perspective(glm::radians(fovy), aspect, 0.1f, 1000.0f);
}

void onKeyCallback(GLFWwindow* window, int key, int scancode, int action, int mods) {
	if (action == GLFW_PRESS) keyStatus[key] = true;
	else if (action == GLFW_RELEASE) keyStatus[key] = false;

	if (key == GLFW_KEY_ESCAPE && action == GLFW_PRESS)
		glfwSetWindowShouldClose(window, GLFW_TRUE);

	if (key == GLFW_KEY_LEFT) angleY += 0.05f;
	if (key == GLFW_KEY_RIGHT) angleY -= 0.05f;

	if (key == GLFW_KEY_UP) angleX += 0.05f;
	if (key == GLFW_KEY_DOWN) angleX -= 0.05f;

	if (key == GLFW_KEY_KP_ADD) disp += 0.10f;
	if (key == GLFW_KEY_KP_SUBTRACT) disp -= 0.10f;
}

void onMouseButtonCallback(GLFWwindow* window, int button, int action, int mods) {

}

void onMouseMoveCallback(GLFWwindow* window, double x, double y) {
	int mouseX = static_cast<int>(x);
	int mouseY = static_cast<int>(y);

	if (firstMouse) {
		lastX = (float)mouseX; lastY = (float)mouseY; firstMouse = false;
	}

	GLfloat xoffset = mouseX - lastX;
	GLfloat yoffset = lastY - mouseY; // Reversed
	lastX = (float)mouseX; lastY = (float)mouseY;

	GLfloat sensitivity = 0.05f;
	xoffset *= sensitivity; yoffset *= sensitivity;

	yaw += xoffset; pitch += yoffset;

	// check for pitch out of bounds otherwise screen gets flipped
	if (pitch > 89.0f) pitch = 89.0f;
	if (pitch < -89.0f) pitch = -89.0f;

	glm::vec3 front;
	front.x = cos(glm::radians(yaw)) * cos(glm::radians(pitch));
	front.y = sin(glm::radians(pitch));
	front.z = sin(glm::radians(yaw)) * cos(glm::radians(pitch));

	cameraFront = glm::normalize(front);

}

static void onMouseWheelCallback(GLFWwindow* window, double xoffset, double yoffset) {
	int yoffsetInt = static_cast<int>(yoffset);

	fovy += yoffsetInt;
	if (fovy >= 1.0f && fovy <= 45.0f) fovy -= (float)yoffset;
	if (fovy <= 1.0f) fovy = 1.0f;
	if (fovy >= 45.0f) fovy = 45.0f;
	proj_matrix = glm::perspective(glm::radians(fovy), aspect, 0.1f, 1000.0f);
}

void debugGL() {
	//Output some debugging information
	cout << "VENDOR: " << (char *)glGetString(GL_VENDOR) << endl;
	cout << "VERSION: " << (char *)glGetString(GL_VERSION) << endl;
	cout << "RENDERER: " << (char *)glGetString(GL_RENDERER) << endl;

	// Enable Opengl Debug
	//glEnable(GL_DEBUG_OUTPUT);
	glEnable(GL_DEBUG_OUTPUT_SYNCHRONOUS);
	glDebugMessageCallback((GLDEBUGPROC)openGLDebugCallback, nullptr);
	glDebugMessageControl(GL_DONT_CARE, GL_DONT_CARE, GL_DONT_CARE, 0, NULL, true);
}

static void APIENTRY openGLDebugCallback(GLenum source,
	GLenum type,
	GLuint id,
	GLenum severity,
	GLsizei length,
	const GLchar* message,
	const GLvoid* userParam) {

	cout << "---------------------opengl-callback------------" << endl;
	cout << "Message: " << message << endl;
	cout << "type: ";
	switch (type) {
	case GL_DEBUG_TYPE_ERROR:
		cout << "ERROR";
		break;
	case GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR:
		cout << "DEPRECATED_BEHAVIOR";
		break;
	case GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR:
		cout << "UNDEFINED_BEHAVIOR";
		break;
	case GL_DEBUG_TYPE_PORTABILITY:
		cout << "PORTABILITY";
		break;
	case GL_DEBUG_TYPE_PERFORMANCE:
		cout << "PERFORMANCE";
		break;
	case GL_DEBUG_TYPE_OTHER:
		cout << "OTHER";
		break;
	}
	cout << " --- ";

	cout << "id: " << id << " --- ";
	cout << "severity: ";
	switch (severity) {
	case GL_DEBUG_SEVERITY_LOW:
		cout << "LOW";
		break;
	case GL_DEBUG_SEVERITY_MEDIUM:
		cout << "MEDIUM";
		break;
	case GL_DEBUG_SEVERITY_HIGH:
		cout << "HIGH";
		break;
	case GL_DEBUG_SEVERITY_NOTIFICATION:
		cout << "NOTIFICATION";
	}
	cout << endl;
	cout << "-----------------------------------------" << endl;
}

string readShader(string name) {
	string vs_text;
	std::ifstream vs_file(name);

	string vs_line;
	if (vs_file.is_open()) {

		while (getline(vs_file, vs_line)) {
			vs_text += vs_line;
			vs_text += '\n';
		}
		vs_file.close();
	}
	return vs_text;
}

void  checkErrorShader(GLuint shader) {
	// Get log lenght
	GLint maxLength;
	glGetShaderiv(shader, GL_INFO_LOG_LENGTH, &maxLength);

	// Init a string for it
	std::vector<GLchar> errorLog(maxLength);

	if (maxLength > 1) {
		// Get the log file
		glGetShaderInfoLog(shader, maxLength, &maxLength, &errorLog[0]);

		cout << "--------------Shader compilation error-------------\n";
		cout << errorLog.data();
	}

}

void readObj(string name) {
	cout << "Loading model " << name << "\n";

	std::vector< unsigned int > vertexIndices, uvIndices, normalIndices;
	std::vector< glm::vec3 > obj_vertices;
	std::vector< glm::vec2 > obj_uvs;
	std::vector< glm::vec3 > obj_normals;

	std::ifstream dataFile(name);

	string rawData;		// store the raw data.
	int countLines = 0;
	if (dataFile.is_open()) {
		string dataLineRaw;
		while (getline(dataFile, dataLineRaw)) {
			rawData += dataLineRaw;
			rawData += "\n";
			countLines++;
		}
		dataFile.close();
	}

	cout << "Finished reading model file " << name << "\n";

	istringstream rawDataStream(rawData);
	string dataLine;
	int linesDone = 0;
	while (std::getline(rawDataStream, dataLine)) {
		if (dataLine.find("v ") != string::npos) {	// does this line have a vector?
			glm::vec3 vertex;

			int foundStart = dataLine.find(" ");  int foundEnd = dataLine.find(" ", foundStart + 1);
			vertex.x = stof(dataLine.substr(foundStart, foundEnd - foundStart));

			foundStart = foundEnd; foundEnd = dataLine.find(" ", foundStart + 1);
			vertex.y = stof(dataLine.substr(foundStart, foundEnd - foundStart));

			foundStart = foundEnd; foundEnd = dataLine.find(" ", foundStart + 1);
			vertex.z = stof(dataLine.substr(foundStart, foundEnd - foundStart));

			obj_vertices.push_back(vertex);
		}
		else if (dataLine.find("vt ") != string::npos) {	// does this line have a uv coordinates?
			glm::vec2 uv;

			int foundStart = dataLine.find(" ");  int foundEnd = dataLine.find(" ", foundStart + 1);
			uv.x = stof(dataLine.substr(foundStart, foundEnd - foundStart));

			foundStart = foundEnd; foundEnd = dataLine.find(" ", foundStart + 1);
			uv.y = stof(dataLine.substr(foundStart, foundEnd - foundStart));

			obj_uvs.push_back(uv);
		}
		else if (dataLine.find("vn ") != string::npos) { // does this line have a normal coordinates?
			glm::vec3 normal;

			int foundStart = dataLine.find(" ");  int foundEnd = dataLine.find(" ", foundStart + 1);
			normal.x = stof(dataLine.substr(foundStart, foundEnd - foundStart));

			foundStart = foundEnd; foundEnd = dataLine.find(" ", foundStart + 1);
			normal.y = stof(dataLine.substr(foundStart, foundEnd - foundStart));

			foundStart = foundEnd; foundEnd = dataLine.find(" ", foundStart + 1);
			normal.z = stof(dataLine.substr(foundStart, foundEnd - foundStart));

			obj_normals.push_back(normal);
		}
		else if (dataLine.find("f ") != string::npos) { // does this line defines a triangle face?
			string parts[3];

			int foundStart = dataLine.find(" ");  int foundEnd = dataLine.find(" ", foundStart + 1);
			parts[0] = dataLine.substr(foundStart + 1, foundEnd - foundStart - 1);

			foundStart = foundEnd; foundEnd = dataLine.find(" ", foundStart + 1);
			parts[1] = dataLine.substr(foundStart + 1, foundEnd - foundStart - 1);

			foundStart = foundEnd; foundEnd = dataLine.find(" ", foundStart + 1);
			parts[2] = dataLine.substr(foundStart + 1, foundEnd - foundStart - 1);

			for (int i = 0; i < 3; i++) {		// for each part

				vertexIndices.push_back(stoul(parts[i].substr(0, parts[i].find("/"))));

				int firstSlash = parts[i].find("/"); int secondSlash = parts[i].find("/", firstSlash + 1);

				if (firstSlash != (secondSlash + 1)) {	// there is texture coordinates.
														// add code for my texture coordintes here.
				}


				normalIndices.push_back(stoul(parts[i].substr(secondSlash + 1)));

			}
		}

		linesDone++;

		if (linesDone % 50000 == 0) {
			cout << "Parsed " << linesDone << " of " << countLines << " from model...\n";
		}

	}

	for (unsigned int i = 0; i < vertexIndices.size(); i += 3) {
		out_vertices.push_back(obj_vertices[vertexIndices[i + 2] - 1]);
		out_normals.push_back(obj_normals[normalIndices[i + 2] - 1]);

		out_vertices.push_back(obj_vertices[vertexIndices[i + 1] - 1]);
		out_normals.push_back(obj_normals[normalIndices[i + 1] - 1]);

		out_vertices.push_back(obj_vertices[vertexIndices[i] - 1]);
		out_normals.push_back(obj_normals[normalIndices[i] - 1]);
	}

}